<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ID Card Generator</title>
  <style>
    /* Your CSS styles for ID card */
  </style>
</head>
<body>
  <div id="idCard">
    <!-- Your ID card content goes here -->
  </div>
  <button id="nextButton">Next</button>

  <script>
    const idCard = document.getElementById('idCard');
    const nextButton = document.getElementById('nextButton');

    // Function to fetch user data from randomuser.me
    async function fetchUserData() {
      const response = await fetch('https://randomuser.me/api/');
      const data = await response.json();
      return data.results[0]; // Assuming only one user data is returned
    }

    // Function to update ID card with user data
    function updateIDCard(userData) {
      // Update the ID card content with user data
      // Example: idCard.innerHTML = <img src="${userData.picture.large}" alt="User Picture"><p>Name: ${userData.name.first} ${userData.name.last}</p>...;
    }

    // Event listener for Next button click
    nextButton.addEventListener('click', async () => {
      const userData = await fetchUserData();
      updateIDCard(userData);
    });

    // You can also implement infinite scroll functionality here
    // Listen for scroll events and fetch more data when user reaches the bottom of the page
  </script>
</body>
</html>


2.
import './App.css';
import { useState, useEffect } from 'react';

function App() {
  const [user, setUser] = useState({
    avatar: '',
    first_name: '',
    last_name: '',
    employment: { title: '' },
    address: { city: '' },
    email: '',
    dob: '',
    gender: ''
  });

  // State to toggle displaying more user info
  const [showMoreInfo, setShowMoreInfo] = useState(false);

  // Use useEffect to fetch user data on component mount
  useEffect(() => {
    getUser();
  }, []);

  // Function to fetch user data from the API
  const getUser = () => {
    const url =
      'https://random-data-api.com/api/v2/users?response_type=json';

    // Fetch data and update user state when data is received
    fetch(url)
      .then(resp => resp.json())
      .then(data => {
        setUser(data);
        changeThemeColor();
      });
  };

  // Function to change the theme color randomly
  const changeThemeColor = () => {
    const randomColor =
      '#' +
      ((Math.random() * 0xffffff) << 0).toString(16).padStart(6, '0');
    document.documentElement.style.setProperty(
      '--theme-color',
      randomColor
    );
  };

  // Function to toggle displaying more user info
  const toggleMoreInfo = () => {
    setShowMoreInfo(!showMoreInfo);
  };

  return (
    <div className='container'>
      <div className='card'>
        <div className='img-container'>
          <img
            src={user.avatar}
            alt={`${user.first_name}  
                    ${user.last_name}`}
          />
        </div>
        <div className='details'>
          <h2>{${user.first_name} ${user.last_name}}</h2>
          <h3>{user.employment.title}</h3>
          <p>
            <strong>Email:</strong>
            {user.email}
          </p>
          <p>
            <strong>Phone:</strong>
            {user.phone_number}
          </p>
          <h4>
            Location:
            {user.address.city}
          </h4>
          {showMoreInfo && (
            <div>
              <p>
                <strong>Date of Birth:</strong>
                {user.date_of_birth}
              </p>
              <p>
                <strong>Gender:</strong>
                {user.gender}
              </p>
            </div>
          )}
          <button onClick={toggleMoreInfo}>
            {showMoreInfo ? 'Show Less Info' : 'Show More Info'}
          </button>
        </div>
      </div>
      <button onClick={getUser}>Next</button>
    </div>
  );
}

export default App;

3. { 
	padding: 0; 
	margin: 0; 
	box-sizing: border-box; 
	font-family: "Poppins", sans-serif; 
} 

:root { 
	--theme-color: #5074f3; 
} 

body { 
	background-color: var(--theme-color); 
} 

.container { 
	width: 90%; 
	max-width: 25em; 
	position: absolute; 
	transform: translate(-50%, -50%); 
	top: 50%; 
	left: 50%; 
} 

.card { 
	width: 100%; 
	padding: 4em 0; 
	background-color: #ffffff; 
	text-align: center; 
	border-radius: 0.5em; 
} 

.card .img-container { 
	height: 11.25em; 
	width: 11.25em; 
	display: block; 
	margin: -8.75em auto 0 auto; 
	background-color: #ffffff; 
	box-shadow: 0 0 0 0.3em #ffffff, 0 0 0 0.9em var(--theme-color); 
	border-radius: 50%; 
} 

.img-container img { 
	width: 100%; 
	border-radius: 50%; 
} 

.container button { 
	display: block; 
	font-size: 1.2em; 
	width: 90%; 
	margin: 2em auto 0 auto; 
	padding: 1.1em 0; 
	border-radius: 0.3em; 
	border: none; 
	outline: none; 
	font-weight: 600; 
	color: #000341; 
	cursor: pointer; 
} 

.card h2 { 
	margin-top: 1.8em; 
	font-weight: 600; 
	color: #000341; 
} 

.card h3, 
.card h4 { 
	font-size: 1em; 
	letter-spacing: 0.02em; 
	margin-top: 0.5em; 
	font-weight: 300; 
	color: #90919e; 
} 

.card i { 
	color: var(--theme-color); 
	margin-right: 0.3em; 
} 

.card h4 { 
	margin-top: 0.4em; 
}

4.const express = require('express');
const axios = require('axios');
const app = express();
const PORT = 3000;

app.get('/generateID', async (req, res) => {
  try {
    const response = await axios.get('http://randomuser.me/api/');
    const userData = response.data.results[0];
    res.send(userData);
  } catch (error) {
    console.error(error);
    res.status(500).send('Error generating ID card');
  }
});

app.listen(PORT, () => {
  console.log(Server is running on http://localhost:${PORT});
});

5.
{
  "name": "random-user-id-card",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "express": "^4.17.1",
    "faker": "^5.5.3"
  }
}

6.
import React, { useState } from 'react';
import './App.css';

function App() {
  const [user, setUser] = useState(null);

  const fetchRandomUser = async () => {
    const response = await fetch('http://localhost:3000/api/random-user');
    const data = await response.json();
    setUser(data);
  };

  return (
    <div className="App">
      <h1>Random User ID Card</h1>
      <button onClick={fetchRandomUser}>Generate Random User</button>
      {user && (
        <div className="card">
          <img src={user.avatar} alt="avatar" />
          <p><strong>ID:</strong> {user.id}</p>
          <p><strong>Name:</strong> {user.name}</p>
          <p><strong>Email:</strong> {user.email}</p>
          <p><strong>Address:</strong> {user.address}</p>
          <p><strong>Phone:</strong> {user.phone}</p>
        </div>
      )}
    </div>
  );
}

export default App;
